{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","add","event","preventDefault","fetch","method","body","JSON","stringify","name","refs","firstName","value","lastName","number","phoneNum","headers","API","then","res","json","fetchProfile","fetchUsers","delete","index","position","state","profile","contacts","this","window","data","setState","console","log","className","onSubmit","ref","type","placeholder","count","map","key","onClick","id","React","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"4NAyGeA,G,8DAnGb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAYRC,IAAM,SAACC,GACLA,EAAMC,iBACRC,MAAM,wCAAyC,CAC9CC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CAChBC,KAAM,EAAKC,KAAKC,UAAUC,MAAQ,IAAM,EAAKF,KAAKG,SAASD,MAC9DE,OAAQ,EAAKJ,KAAKK,SAASH,QAC7BI,QAAS,CAAE,eAAgB,mBAAoBC,IAAK,YAElDC,MAAK,SAAAC,GAAS,OAAOA,EAAIC,UACzBF,MAAK,WACJ,EAAKG,eACL,EAAKC,iBAzBU,EA6BnBC,OAAS,SAACC,GACRpB,MAAM,2CAA4C,CAChDC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CAAEiB,SAAUD,IACjCR,QAAS,CAAE,eAAgB,mBAAoBC,IAAK,YAErDC,MAAK,SAAAC,GAAU,OAAOA,EAAIC,UAC1BF,MAAK,WACJ,EAAKG,eACL,EAAKC,iBApCP,EAAKI,MAAQ,CACXC,QAAS,GACTC,SAAU,IAJK,E,gEASjBC,KAAKR,eACLQ,KAAKP,e,qCAgCS,IAAD,OACbQ,OAAO1B,MAAM,mCAAoC,CAC/CY,QAAS,CAAEC,IAAK,YAEjBC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACa,GACL,EAAKC,SAAS,CAAEL,QAASI,IACzBE,QAAQC,IAAIH,Q,mCAIF,IAAD,OACXD,OAAO1B,MAAM,oCAAqC,CAChDY,QAAS,CAAEC,IAAK,YAEjBC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACa,GACL,EAAKC,SAAS,CAAEJ,SAAUG,EAAKH,WAC/BK,QAAQC,IAAIH,Q,+BAIN,IAAD,OACT,OACE,6BACE,wBAAII,UAAU,eAAd,gBACA,0BAAMC,SAAUP,KAAK5B,KACnB,kCACE,4BAAQkC,UAAU,eAAc,gDAChC,2BAAOE,IAAI,YAAYC,KAAK,OAAOC,YAAY,aAAaJ,UAAU,kBACtE,2BAAOE,IAAI,WAAWC,KAAK,OAAOC,YAAY,YAAYJ,UAAU,aACpE,2BAAOE,IAAI,WAAWC,KAAK,OAAOC,YAAY,eAAeJ,UAAU,kBACvE,4BAAQG,KAAK,SAASH,UAAU,uBAAhC,SAGJ,6BACE,6BACA,wBAAIA,UAAU,gBAAd,iBACA,uBAAGA,UAAU,gBAAe,yCAA5B,IAAoDN,KAAKH,MAAMC,QAAQlB,KAAvE,IAA6E,6BAC7E,kDADA,IACiCoB,KAAKH,MAAMC,QAAQa,OACpD,8BAEF,6BACE,wBAAIL,UAAU,gBAAd,0BAECN,KAAKH,MAAME,SAASa,KAAI,SAAC7B,EAAOY,GAC9B,OAAO,uBAAGW,UAAU,gBAAgBO,IAAKlB,GAAQA,EAAQ,EAAlD,KAAsD,oCAAtD,IAAoEZ,EAAMH,KAAK,6BAA/E,eACW,uCADX,IAC4BG,EAAME,OAAO,4BAAQwB,KAAK,SAC7DK,QAAS,kBAAM,EAAKpB,OAAOC,IAAQW,UAAU,gCAAgCS,GAAIpB,GADjC,oB,GA3FzCqB,IAAMC,YCQJC,QACW,cAA7BjB,OAAOkB,SAASC,UAEe,UAA7BnB,OAAOkB,SAASC,UAEhBnB,OAAOkB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxC,MAAK,SAAAyC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7B,QAAQ6B,MAAMA,EAAMC,a","file":"static/js/main.6533347f.chunk.js","sourcesContent":["import React from 'react';\nimport \"./App.css\"\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      profile: {},\n      contacts: []\n    };\n  }\n\n  componentDidMount() {\n    this.fetchProfile();\n    this.fetchUsers();\n  }\n\n  add = (event) => {\n    event.preventDefault();\n\t\tfetch('http://plato.mrl.ai:8080/contacts/add', {\n\t\t\tmethod: 'POST',\n\t\t\tbody: JSON.stringify({ \n        name: this.refs.firstName.value + ' ' + this.refs.lastName.value,\n\t\t\t  number: this.refs.phoneNum.value }),\n\t\t\theaders: { \"Content-type\": \"application/json\", API: \"guffey\" }\n    })\n    .then(res => { return res.json() })\n    .then(() => {\n      this.fetchProfile();\n      this.fetchUsers();\n\t\t\t});\n  }\n  \n  delete = (index) => {\n    fetch('http://plato.mrl.ai:8080/contacts/remove', {\n      method: 'POST',\n      body: JSON.stringify({ position: index }),\n      headers: { \"Content-type\": \"application/json\", API: \"guffey\" }\n    })\n    .then(res => {  return res.json() }) \n    .then(() => {\n      this.fetchProfile();\n      this.fetchUsers();\n    });\n  }\n  \n  fetchProfile() {\n    window.fetch(\"http://plato.mrl.ai:8080/profile\", { \n      headers: { API: \"guffey\" } \n    })\n    .then((res) => res.json())\n    .then((data) => {\n      this.setState({ profile: data });\n      console.log(data)\n    });\n  }\n\n  fetchUsers() {\n    window.fetch(\"http://plato.mrl.ai:8080/contacts\", { \n      headers: { API: \"guffey\" } \n    })\n    .then((res) => res.json())\n    .then((data) => {\n      this.setState({ contacts: data.contacts });\n      console.log(data)\n    });\n  }\n\n  render() {\n  return (\n    <div>\n      <h2 className=\"header mt-3\">Contacts App</h2>\n      <form onSubmit={this.add}>\n        <fieldset>\n          <legend className=\"legend ml-3\"><strong>New Contact</strong></legend>\n          <input ref=\"firstName\" type='text' placeholder='First Name' className=\"inputBox ml-2\"/>\n          <input ref=\"lastName\" type='text' placeholder='Last Name' className=\"inputBox\"/>\n          <input ref=\"phoneNum\" type='text' placeholder='Phone Number' className=\"inputBox ml-2\"/>\n          <button type=\"submit\" className=\"myButton ml-2 col-3\">Add</button>\n        </fieldset>\n      </form>\n      <div>\n        <hr />\n        <h3 className=\"header2 ml-2\">Your Profile:</h3>\n        <p className=\"profile ml-2\"><strong>Name:</strong> {this.state.profile.name} <br />\n        <strong>Total Entries:</strong> {this.state.profile.count}</p>\n        <hr />\n      </div>\n      <div>\n        <h3 className=\"header2 ml-2\">Your List of Contacts:</h3>\n       {\n         this.state.contacts.map((value, index) => {\n           return <p className=\"contacts ml-2\" key={index}>{index + 1}. <u>Name:</u> {value.name}<br />\n           &nbsp;&nbsp;&nbsp;<u>Phone #:</u> {value.number}<button type=\"submit\" \n           onClick={() => this.delete(index)} className=\"myButton2 col-3 offset-1 ml-5\" id={index}>Delete</button></p>;\n         })\n       }\n      </div>\n    </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}